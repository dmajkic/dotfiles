if &compatible
  set nocompatible
endif

if has("win64") || has("win32")
  let g:python3_host_prog="C:/Users/dmajk/AppData/Local/Programs/Python/Python311/python.exe"
else
  let g:python3_host_prog="python3"
endif
let g:loaded_perl_provider = 0

call plug#begin('~/.vim/plugged')

" Core plugins
Plug 'liuchengxu/vim-which-key'       " Displays windows with list of key shortcuts
Plug 'majutsushi/tagbar'              " Tags, mounted on F10
Plug 'voldikss/vim-floaterm'          " Floating terminal
Plug 'junegunn/fzf', {'do': { -> fzf#install() } } " Fuzzy find using fzf, Ctrl+P,F,X
Plug 'junegunn/fzf.vim'               " fzf interface (alt. CtrlP)
Plug 'itchyny/lightline.vim'          " Status bar (alt. powerline, airline)

"Plug 'scrooloose/nerdtree'            " Files, mopunted on <leader>N
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-fugitive'             " Git integration
Plug 'tpope/vim-git'                  " Git commands
Plug 'tpope/vim-dispatch'             " :Make and :Dispatch for tmux dispatching
Plug 'tpope/vim-eunuch'               " File commands :Delete, :Chmod, :Wall, :SudoWrite
Plug 'tpope/vim-repeat'               " Repeat with .
Plug 'airblade/vim-gitgutter'         " Git changes in gutter
Plug 'mileszs/ack.vim'                " Find in files, Ag
Plug 'vim-scripts/tComment'           " Commenter, mounted on ctrl+_,ctrl+_
Plug 'ntpeters/vim-better-whitespace' " Whitespace, strip with <leader><Space>
Plug 'thinca/vim-visualstar'          " Search word, mounted on *
Plug 'terryma/vim-expand-region'      " v-v-v expand region
Plug 'editorconfig/editorconfig-vim'  " Support .editorconfig files
Plug 'w0rp/ale'                       " Async Linter (alt. syntastic)
Plug 'maximbaz/lightline-ale'         " ALE u LightLine
Plug 'janko-m/vim-test'               " Vim testing

if !has('nvim')
  Plug 'lambdalisue/fern.vim'           " File manager
  Plug 'lambdalisue/vim-fern-git-status'
  Plug 'lambdalisue/vim-nerdfont'
  Plug 'lambdalisue/vim-fern-renderer-nerdfont'
  Plug 'lambdalisue/vim-fern-hijack'
  function! s:fern_settings() abort
   " nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
   " nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
    nmap <silent> <buffer> p <Plug>(fern-action-preview:auto:toggle)
    nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
    nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
    nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
    nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
  endfunction
  let g:fern#renderer = "nerdfont"

  augroup fern-settings
    autocmd!
    autocmd FileType fern call s:fern_settings()
  augroup END
  Plug 'yuki-yano/fern-preview.vim'
  Plug 'Shougo/deoplete.nvim'           " Autocomplete
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  " Plug 'SirVer/ultisnips'             " Snippet engine, (alt. vim-snipmate) (req. Python in vim)
  Plug 'garbas/vim-snipmate'            " Snippet engine (alt ultisnips) does not require Python
  Plug 'MarcWeber/vim-addon-mw-utils'   " SnipMate dependency
  Plug 'honza/vim-snippets'             " Snippets library
	Plug 'yegappan/lsp'

	let lspOpts = #{
	  \ autoHighlightDiags: v:true,
    \ aleSupport: v:true,
    \ autoHighlight: v:true,
    \ completionTextEdit: v:true,
    \ noNewlineInCompletion: v:true,
    \ outlineOnRight: v:true,
    \ outlineWinSize: 70,
    \ showDiagWithSign: v:false,
    \ useQuickfixForLocations: v:true,
		\ ignoreMissingServer: v:true,
		\ showDiagOnStatusLine: v:true,
		\ showInlayHints: v:true,
		\}
	autocmd User LspSetup call LspOptionsSet(lspOpts)

	let lspServers = [#{
		\	  name: 'clang',
		\	  filetype: ['c', 'cpp'],
		\	  path: 'clangd',
		\	  args: ['--background-index']
		\
		\},
	  \ #{ name: 'gopls', filetype: ['go', 'gomod'],  path: 'gopls', args: ['serve']  },
	  \ #{ name: 'ruby-lsp', filetype: ['rb', 'ruby'],  path: 'rubocop', args: [], syncInit: v:true  },
	\]
	autocmd User LspSetup call LspAddServer(lspServers)

	"Enable auto selection of the fist autocomplete item"
	augroup LspSetup
		au!
		au User LspAttached set completeopt-=noselect
	augroup END

	"Disable newline on selecting completion option"
	inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
	nnoremap <C-j> :LspHover<CR>
else
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
  Plug 'neovim/nvim-lspconfig'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'rcarriga/nvim-notify'

  " Snipet
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  let g:deoplete#enable_at_startup = 1
  inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
  function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction"}}}

endif

" Colors
Plug 'nanotech/jellybeans.vim'
Plug 'tpope/vim-vividchalk'
Plug 'vim-scripts/molokai'
Plug 'jnurmine/Zenburn'
Plug 'telamon/vim-color-github'
" Plug 'vim-scripts/Colour-Sampler-Pack'
Plug 'altercation/vim-colors-solarized'
" Plug 'TechnoGate/janus-colors'
Plug 'chriskempson/base16-vim'
Plug 'luxed/ayu-vim'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
"Plug 'skwp/vim-rspec'
Plug 'sunaku/vim-ruby-minitest'
Plug 'ngmy/vim-rubocop'
Plug 'tpope/vim-surround'           " Surround with cs<quote><quote>
Plug 'tpope/vim-endwise'            " Autoinsert end, endif, ...
Plug 'jiangmiao/auto-pairs'         " Autoinsert quotes
"Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-liquid'
Plug 'slim-template/vim-slim'
"Plug 'kchmck/vim-coffee-script'
Plug 'depuracao/vim-rdoc'

" Javascript, Ember, React
Plug 'pangloss/vim-javascript'
"Plug 'othree/javascript-libraries-syntax'  " JS Libs syntax (jquery, react, vudle...)
Plug 'AndrewRadev/ember_tools.vim'          " Ember support, gf
Plug 'alexlafroscia/vim-ember-cli'
Plug 'joukevandermaas/vim-ember-hbs'
Plug 'mmalecki/vim-node.js'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'ramitos/jsctags'
"Plug 'ludovicchabant/vim-gutentags'      " Automatic tags handler
"Plug 'gorodinskiy/vim-coloresque.git'    " Shows CSS color inline
Plug 'chrisbra/Colorizer'                 " Shows CSS color inline
"Plug 'groenewege/vim-less'

" Go
Plug 'fatih/vim-go'

" Languages Other
Plug 'tpope/vim-markdown'
Plug 'timcharper/textile.vim'
"Plug 'ajf/puppet-vim'
Plug 'chrisbra/csv.vim'

" Tools Other
"Plug 'vim-scripts/vimwiki'              " Wiki engine, mounted on <Leader>ww
"Plug 'tpope/vim-projectionist'          " Procejt options support in json
Plug 'michaeljsmith/vim-indent-object'  " Indent using << and >>
Plug 'terryma/vim-multiple-cursors'     " Mapped on Ctrl+n
Plug 'easymotion/vim-easymotion'         " Move in file, mounted on <leader><leader>
"Plug 'sjl/gundo.vim'
"Plug 'Rykka/colorv.vim'                " Colorpicker

call plug#end()

if has('nvim')
  lua require 'lspconfig'
  lua require'lspconfig'.solargraph.setup{}
endif
